CCS PCH C Compiler, Version 5.108Pd, 1               15-5-22 21:14
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\Jarod\Documents\test2\main.lst

               ROM used:   708 bytes (4%)
                           Largest free fragment is 15672
               RAM used:   33 (4%) at main() level
                           40 (5%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   0218
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   00BA
0060:  BTFSS  F9D.5
0062:  GOTO   006C
0066:  BTFSC  F9E.5
0068:  GOTO   00C0
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... #include <main.h>
.................... #include <18F448.h>
.................... //////////// Standard Header file for the PIC18F448 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F448
*
00E2:  CLRF   01
00E4:  CLRF   02
00E6:  CLRF   00
00E8:  CLRF   03
00EA:  MOVF   23,W
00EC:  BNZ   00F2
00EE:  MOVF   22,W
00F0:  BZ    0122
00F2:  MOVLW  10
00F4:  MOVWF  24
00F6:  BCF    FD8.0
00F8:  RLCF   20,F
00FA:  RLCF   21,F
00FC:  RLCF   00,F
00FE:  RLCF   03,F
0100:  MOVF   23,W
0102:  SUBWF  03,W
0104:  BNZ   010A
0106:  MOVF   22,W
0108:  SUBWF  00,W
010A:  BNC   011A
010C:  MOVF   22,W
010E:  SUBWF  00,F
0110:  BTFSS  FD8.0
0112:  DECF   03,F
0114:  MOVF   23,W
0116:  SUBWF  03,F
0118:  BSF    FD8.0
011A:  RLCF   01,F
011C:  RLCF   02,F
011E:  DECFSZ 24,F
0120:  BRA    00F6
0122:  GOTO   0282 (RETURN)
0126:  MOVF   26,W
0128:  CLRF   01
012A:  SUBWF  25,W
012C:  BC    0134
012E:  MOVFF  25,00
0132:  BRA    014C
0134:  CLRF   00
0136:  MOVLW  08
0138:  MOVWF  27
013A:  RLCF   25,F
013C:  RLCF   00,F
013E:  MOVF   26,W
0140:  SUBWF  00,W
0142:  BTFSC  FD8.0
0144:  MOVWF  00
0146:  RLCF   01,F
0148:  DECFSZ 27,F
014A:  BRA    013A
014C:  RETURN 0
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... 
.................... #FUSES NOWDT                 	//No Watch Dog Timer
.................... 
.................... #use delay(crystal=20000000)
*
00C6:  MOVLW  03
00C8:  SUBWF  21,F
00CA:  BNC   00DE
00CC:  CLRF   FEA
00CE:  MOVLW  21
00D0:  MOVWF  FE9
00D2:  MOVF   FEF,W
00D4:  BZ    00DE
00D6:  BRA    00DA
00D8:  BRA    00DA
00DA:  DECFSZ FEF,F
00DC:  BRA    00D8
00DE:  GOTO   0250 (RETURN)
*
014E:  CLRF   FEA
0150:  MOVLW  24
0152:  MOVWF  FE9
0154:  MOVF   FEF,W
0156:  BZ    0172
0158:  MOVLW  06
015A:  MOVWF  01
015C:  CLRF   00
015E:  DECFSZ 00,F
0160:  BRA    015E
0162:  DECFSZ 01,F
0164:  BRA    015C
0166:  MOVLW  7B
0168:  MOVWF  00
016A:  DECFSZ 00,F
016C:  BRA    016A
016E:  DECFSZ FEF,F
0170:  BRA    0158
0172:  GOTO   01EC (RETURN)
.................... 
.................... 
.................... 
.................... #INT_RTCC
.................... void  RTCC_isr(void) 
.................... {
.................... 
.................... }
.................... 
*
00BA:  BCF    FF2.2
00BC:  GOTO   006C
.................... #INT_RDA
.................... void  RDA_isr(void) 
.................... {
.................... 
00C0:  BCF    F9E.5
00C2:  GOTO   006C
.................... }
.................... 
.................... void test_diodes(int val_max, int val_min, int true_val, int ech_aff){
....................    if((true_val > val_max) || (true_val < val_min)){
*
01FE:  MOVF   22,W
0200:  SUBWF  20,W
0202:  BNC   020A
0204:  MOVF   21,W
0206:  SUBWF  22,W
0208:  BC    0210
....................       // Dans un cas d'erreur
.................... 
....................       //Dans le cas ou la valeur mesuree est entre les deux valeurs extremes
....................       // led verte allumee
....................       output_toggle(PIN_E1);
020A:  BCF    F96.1
020C:  BTG    F8D.1
....................    }
020E:  BRA    0214
....................    else{
....................       output_high(PIN_E0);
0210:  BCF    F96.0
0212:  BSF    F8D.0
....................    }
0214:  GOTO   02C4 (RETURN)
.................... }
.................... 
.................... int afficheurs(int true_val, int ech_aff){
*
0176:  CLRF   22
0178:  MOVLW  10
017A:  MOVWF  23
.................... // Fonctiongerant les afficheurs 7 segments
.................... 
....................    
....................    int val_point = 0b00000000; // valeur de base -# on affiche pas de point
....................    int val_affich = 0b00010000; // valeur de base, sera d'office changee'
....................    
....................    //echange a chaque affichage -X alternance des afficheurs
....................    if (ech_aff == 0){//aficheur 1 -> plus grand
017C:  MOVF   21,F
017E:  BNZ   01B2
....................       ech_aff = 1;
0180:  MOVLW  01
0182:  MOVWF  21
....................       val_affich = 0b00010000; //active le premier afficheur
0184:  MOVLW  10
0186:  MOVWF  23
....................       
....................       if (true_val >= 100){
0188:  MOVF   20,W
018A:  SUBLW  63
018C:  BC    01A2
....................          val_point = 0b00100000; // binaire pour allumer le point 
018E:  MOVLW  20
0190:  MOVWF  22
....................          true_val = true_val/100; //division entiere pour seulement avoir le premier chiffre
0192:  MOVFF  20,25
0196:  MOVLW  64
0198:  MOVWF  26
019A:  RCALL  0126
019C:  MOVFF  01,20
....................          
....................       }
01A0:  BRA    01B0
....................       else{
....................          true_val = true_val/10;
01A2:  MOVFF  20,25
01A6:  MOVLW  0A
01A8:  MOVWF  26
01AA:  RCALL  0126
01AC:  MOVFF  01,20
....................       }
....................       
....................    }
01B0:  BRA    01E6
....................    else{//afficheur 2 -# plus petit
....................       ech_aff = 0;
01B2:  CLRF   21
....................       val_affich = 0b01000000; //active le deuxieme afficheur
01B4:  MOVLW  40
01B6:  MOVWF  23
....................       
....................       if (true_val >= 100){
01B8:  MOVF   20,W
01BA:  SUBLW  63
01BC:  BC    01D8
....................          true_val = (true_val/10)%10; //on prends le deuxieme chiffre des trois
01BE:  MOVFF  20,25
01C2:  MOVLW  0A
01C4:  MOVWF  26
01C6:  RCALL  0126
01C8:  MOVFF  01,25
01CC:  MOVLW  0A
01CE:  MOVWF  26
01D0:  RCALL  0126
01D2:  MOVFF  00,20
....................       }
01D6:  BRA    01E6
....................       else{
....................          true_val = true_val%10;
01D8:  MOVFF  20,25
01DC:  MOVLW  0A
01DE:  MOVWF  26
01E0:  RCALL  0126
01E2:  MOVFF  00,20
....................       }
....................    }
....................    
....................    delay_ms(150); //enlever IRL ?
01E6:  MOVLW  96
01E8:  MOVWF  24
01EA:  BRA    014E
....................    output_b(true_val | val_affich | val_point);
01EC:  MOVF   20,W
01EE:  IORWF  23,W
01F0:  IORWF  22,W
01F2:  CLRF   F93
01F4:  MOVWF  F8A
....................    //output_b(0b00011000);
....................    // OU logique des differents nombres binaires. Pas sur que ca fonctionne, val_affich et val_point -> int
....................    // alors que val -> tableau de int
....................    return ech_aff;
01F6:  MOVFF  21,01
01FA:  GOTO   02AE (RETURN)
.................... }
.................... 
.................... void main()
*
0218:  CLRF   FF8
021A:  BCF    FD0.7
021C:  BSF    07.7
021E:  BSF    FC1.0
0220:  BSF    FC1.1
0222:  BSF    FC1.2
0224:  BCF    FC1.3
0226:  MOVLW  07
0228:  MOVWF  FB4
.................... {
....................    setup_timer_0(RTCC_INTERNAL);      //409 us overflow
022A:  MOVLW  80
022C:  MOVWF  FD5
.................... 
.................... 
....................    enable_interrupts(INT_RTCC);
022E:  BSF    FF2.5
....................    enable_interrupts(INT_RDA);
0230:  BSF    F9D.5
....................    enable_interrupts(GLOBAL);
0232:  MOVLW  C0
0234:  IORWF  FF2,F
....................    setup_low_volt_detect(FALSE);
0236:  CLRF   FD2
....................    int ech_aff = 0;
....................    long duration;
....................    int16 val_mesuree;
0238:  CLRF   19
....................    while(TRUE)
....................    {
.................... 
....................       int val_max = 120;
....................       int val_min = 60;
023A:  MOVLW  78
023C:  MOVWF  1E
023E:  MOVLW  3C
0240:  MOVWF  1F
....................       //Initialization + etre sure que trigger est off
....................       
....................       //Prise d'une mesure
....................       output_high(PIN_C0);
0242:  BCF    F94.0
0244:  BSF    F8B.0
....................       delay_us(300);
0246:  MOVLW  02
0248:  MOVWF  20
024A:  MOVLW  95
024C:  MOVWF  21
024E:  BRA    00C6
0250:  DECFSZ 20,F
0252:  BRA    024A
....................       output_low(PIN_C0);
0254:  BCF    F94.0
0256:  BCF    F8B.0
....................       
....................       //Attend un output
....................       while(!input(PIN_C1)){}
0258:  BSF    F94.1
025A:  BTFSS  F82.1
025C:  BRA    0258
....................       set_timer0(0);
025E:  CLRF   FD7
0260:  CLRF   FD6
0262:  NOP   
.................... 
....................       
....................       //Attend que l'output se termine
....................       while(input(PIN_C1)){}
0264:  BSF    F94.1
0266:  BTFSC  F82.1
0268:  BRA    0264
....................       duration = (long)get_timer0();
026A:  MOVF   FD6,W
026C:  MOVWF  1A
026E:  MOVFF  FD7,1B
....................       val_mesuree = (int16)(duration / 145);
0272:  MOVFF  1B,21
0276:  MOVFF  1A,20
027A:  CLRF   23
027C:  MOVLW  91
027E:  MOVWF  22
0280:  BRA    00E2
0282:  MOVFF  02,1D
0286:  MOVFF  01,1C
....................       
....................           //Affichage
....................       if (val_mesuree >= 1000){ //Overflow ou distance negative = erreur
028A:  MOVF   1D,W
028C:  SUBLW  02
028E:  BC    02A4
0290:  XORLW  FF
0292:  BNZ   029A
0294:  MOVF   1C,W
0296:  SUBLW  E7
0298:  BC    02A4
....................          output_b(0);
029A:  CLRF   F93
029C:  CLRF   F8A
....................          output_high(PIN_D7); //affiche juste un point 
029E:  BCF    F95.7
02A0:  BSF    F8C.7
.................... 
....................       }
02A2:  BRA    02B2
....................       else{
....................          ech_aff = afficheurs(val_mesuree, ech_aff);
02A4:  MOVFF  1C,20
02A8:  MOVFF  19,21
02AC:  BRA    0176
02AE:  MOVFF  01,19
....................       }
....................       test_diodes(val_max, val_min, val_mesuree, ech_aff);
02B2:  MOVFF  1E,20
02B6:  MOVFF  1F,21
02BA:  MOVFF  1C,22
02BE:  MOVFF  19,23
02C2:  BRA    01FE
02C4:  BRA    023A
....................       //TODO: User Code
....................    }
.................... 
.................... }
02C6:  SLEEP 

Configuration Fuses:
   Word  1: 2200   HS NOOSCSEN
   Word  2: 0E0E   PUT BROWNOUT BORV25 NOWDT WDT128
   Word  3: 0000  
   Word  4: 0081   STVREN NOLVP NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
